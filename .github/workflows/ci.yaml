name: PR E2E C

env:
  TRIVY_SCAN_SKIP_CHART_LIST: "nmstate cert-manager contour ingress-nginx harbor-operator"
  IMAGE_HINT_FILE_NAME: ".relok8s-images.yaml"
  SCHEMA_FILE_NAME: "values.schema.json"

on:
  pull_request_target:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: check chart config
        run : |
          TMP=`ls charts`
          for ITEM in $TMP ; do
              [ ! -d "charts/${ITEM}" ] && continue
              echo "check config for chart $ITEM "
              [ ! -f "charts/${ITEM}/config" ] && echo "error, miss charts/${ITEM}/config " && exit 1
          
              for VAR in DAOCLOUD_REPO_PROJECT UPGRADE_METHOD ; do
                  VAL=` source charts/${ITEM}/config && echo ${!VAR} `
                  [ -n "$VAL" ] || { echo "error, miss $VAR in charts/${ITEM}/config"; exit 1 ; }
              done
              
              UPGRADE_METHOD=` source charts/${ITEM}/config && echo $UPGRADE_METHOD `
              if [ "$UPGRADE_METHOD" == "pr" ] || [ "$UPGRADE_METHOD" == "issue" ] ; then
                  for VAR in REPO_URL REPO_NAME CHART_NAME VERSION UPGRADE_REVIWER ; do
                      VAL=` source charts/${ITEM}/config && echo ${!VAR} `
                      [ -n "$VAL" ] || { echo "error, miss $VAR in charts/${ITEM}/config"; exit 1 ; }
                  done
              elif [ "$UPGRADE_METHOD" == "none" ] ; then
                  echo ""
              else
                  echo "error, UPGRADE_METHOD=$UPGRADE_METHOD must be 'pr'/'issue'/'none' in charts/${ITEM}/config"
                  exit 1
              fi

          done
          exit 0


  check_change:
    runs-on: ubuntu-latest
    outputs:
      project: ${{ steps.check_change.outputs.changed_project }}
      pro_version_changed: ${{ env.PRO_CHANGED_VERSION }}
    steps:
      - name: "Setup go"
        uses: actions/setup-go@v3
        with:
          go-version: '1.19'

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: check change
        id: check_change
        run: |
          # Using the Github API to detect the files changed as git merge-base stops working when the branch is behind
          # and jitterbit/get-changed-files does not support pull_request_target
          URL="https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files"
          files_changed_data=$(curl -s --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' -X GET -G "$URL")
          echo "files_changed_data: $files_changed_data"
          files_changed="$(echo $files_changed_data | jq -r '.[] | .filename')"
          echo "files_changed: $files_changed"
          #--------------------
          # Adding || true to avoid "Process exited with code 1" errors
          charts_changed="$(echo "$files_changed" | xargs dirname | grep -E -o "charts/([^/]*)/\1" | grep -o "charts/[^/]*" | sort | uniq | awk -F'/' '{print $2}' | tr '\n' ' ' || true)"
          echo "charts_changed: $charts_changed"
          #--------------------
          # issue: just release one project
          PRO_CHANGED_VERSION=""
          for PRO in ${charts_changed} ; do
            if [ -d "charts/${PRO}" ] ; then
               if grep  "charts/${PRO}/${PRO}/Chart.yaml" <<< "${files_changed}" &>/dev/null ; then
                   PRO_CHANGED_VERSION="${PRO}"
                  break
               fi
            fi
          done
          echo "PRO_CHANGED_VERSION=${PRO_CHANGED_VERSION}"
          echo "PRO_CHANGED_VERSION=${PRO_CHANGED_VERSION}" >> $GITHUB_ENV
          #--------------------
          test_dir_changed="$(echo "$files_changed" | xargs dirname |  grep -o "test/[^/]*" | sort | uniq  || true)"
          if [ -n "$test_dir_changed" ] && [ -z "$charts_changed" ] ; then
              # add spiderppool for testing test changes
              charts_changed=` echo "$charts_changed spiderpool" | tr -s ' ' | tr ' ' '\n' | sort | uniq | tr '\n' ' ' || true`
              echo "detect test changes, add spiderpool, charts_changed: $charts_changed"
          fi
          charts_changed=` echo $charts_changed `
          RES=""
          for PRO in ${charts_changed} ; do
            if [ -d "charts/${PRO}" ] ; then
              RES+="${PRO} "
            fi
          done
          echo ::set-output name=changed_project::${RES}

      - name: check chart override
        run: |
          BASE=$PWD
          cd cmd/chart-override-check
          for PROJECT in ${{ steps.check_change.outputs.changed_project }} ; do
              PROJECT_PATH=${BASE}/charts/${PROJECT}
              go run main.go -path ${PROJECT_PATH}/${PROJECT} -skipCPath ${PROJECT_PATH}/skip-check.yaml
          done

      - name: check image hint file
        run: |
          BASE=$PWD
          for PROJECT in ${{ steps.check_change.outputs.changed_project }} ; do
              CHART_PATH=${BASE}/charts/${PROJECT}/${PROJECT}
              [ -f "${CHART_PATH}/${{ env.IMAGE_HINT_FILE_NAME }}" ] \
                  || { echo "error, miss ${{ env.IMAGE_HINT_FILE_NAME }} file in chart ${PROJECT} " ; exit 1 ; }
              ! grep -E '\-[[:space:]]+[^"].*[^"]' ${CHART_PATH}/${{ env.IMAGE_HINT_FILE_NAME }} \
                  || { echo "error, must use Double quotation in ${PROJECT}/.relok8s-images.yaml " ; exit 1 ; }
          done

      - name: check image repo
        run: |
          BASE=$PWD
          for PROJECT in ${{ steps.check_change.outputs.changed_project }} ; do
              CHART_PATH=${BASE}/charts/${PROJECT}/${PROJECT}
              if helm template test ${CHART_PATH} | grep ' image: ' | tr -d '"' | awk '{print $2}' | grep -v "daocloud" &>/dev/null ; then
                  echo "error, image is not in daocloud repo"
                  helm template test ${CHART_PATH} | grep ' image: ' | tr -d '"' | awk '{print $2}'
                  exit 1
              fi
          done
          
      - name: check schema file
        run: |
          BASE=$PWD
          for PROJECT in ${{ steps.check_change.outputs.changed_project }} ; do
              CHART_PATH=${BASE}/charts/${PROJECT}/${PROJECT}
              [ -f "${CHART_PATH}/${{ env.SCHEMA_FILE_NAME }}" ] \
                  || { echo "error, miss ${{ env.SCHEMA_FILE_NAME }} file in chart ${PROJECT} " ; exit 1 ; }
          done

      - name: check chart trivy
        run: |
          echo "TRIVY_SCAN_SKIP_CHART_LIST= ${{ env.TRIVY_SCAN_SKIP_CHART_LIST }} " 
          BASE=$PWD
          for PROJECT in ${{ steps.check_change.outputs.changed_project }} ; do
              # skip chart trivy
              grep " ${PROJECT} " <<< " ${{ env.TRIVY_SCAN_SKIP_CHART_LIST }} " && continue
              docker run --rm \
                  -v /tmp/trivy:/root/trivy.cache/  \
                    -v ${BASE}:/tmp/src  \
                    aquasec/trivy:latest config --exit-code 1  --severity CRITICAL /tmp/src/charts/${PROJECT}/${PROJECT}
              (( $? == 0 )) || { echo "error, failed to check chart trivy" && exit 1 ; }
              echo "chart trivy check: pass charts/${PROJECT}/${PROJECT} "
          done
          
      - name: check upgrade
        run: |
          for PROJECT in ${{ steps.check_change.outputs.changed_project }} ; do
               make build_chart -e PROJECT=${PROJECT} \
                  || { echo "error, failed to call 'make build_chart' to update ${PROJECT} " ; exit 1 ; }
              if ! git diff --exit-code --quiet ; then
                  git status
                  echo "error, after 'make build_chart', chart is not updated"
                  exit 1
              fi
          done

  call_e2e:
    uses: ./.github/workflows/call-e2e.yml
    needs: [check_change]
    if: ${{ needs.check_change.outputs.project != '' }}
    with:
      project: ${{ needs.check_change.outputs.project }}
      ref: ${{ github.event.pull_request.head.sha }}
    secrets: inherit

#  nofity_version_changed:
#    runs-on: ubuntu-latest
#    needs: [ check_change ]
#    if: ${{ needs.check_change.outputs.pro_version_changed != '' }}
#    steps:
#      - name: create an issue
#        uses: dacbd/create-issue-action@main
#        with:
#          token: ${{ secrets.GITHUB_TOKEN }}
#          repo: DaoCloud/DaoCloud-docs
#          title: "project ${{ needs.check_change.outputs.pro_version_changed }} update to version "
#          body: my new issue
#
#      - name: Print outputs
#        run: |
#          echo ${{ steps.create-issue.outputs.id }}
#          echo ${{ steps.create-issue.outputs.number }}
