{
    "title": "Chart Values",
    "type": "object",
    "properties": {
        "global": {
            "type": "object",
            "properties": {
                "imageRegistry": {
                    "type": "string",
                    "description": "Global Docker image registry",
                    "default": ""
                },
                "imagePullSecrets": {
                    "type": "array",
                    "description": "Global Docker registry secret names as an array",
                    "default": [],
                    "items": {}
                },
                "storageClass": {
                    "type": "string",
                    "description": "Global StorageClass for Persistent Volume(s)",
                    "default": ""
                }
            }
        },
        "nameOverride": {
            "type": "string",
            "description": "String to partially override contour.fullname include (will maintain the release name)",
            "default": ""
        },
        "fullnameOverride": {
            "type": "string",
            "description": "String to fully override contour.fullname template",
            "default": ""
        },
        "namespaceOverride": {
            "type": "string",
            "description": "String to fully override common.names.namespace",
            "default": ""
        },
        "kubeVersion": {
            "type": "string",
            "description": "Force target Kubernetes version (using Helm capabilities if not set)",
            "default": ""
        },
        "extraDeploy": {
            "type": "array",
            "description": "Array of extra objects to deploy with the release",
            "default": [],
            "items": {}
        },
        "commonLabels": {
            "type": "object",
            "description": "Labels to add to all deployed objects",
            "default": {}
        },
        "commonAnnotations": {
            "type": "object",
            "description": "Annotations to add to all deployed objects",
            "default": {}
        },
        "diagnosticMode": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable diagnostic mode (all probes will be disabled and the command will be overridden)",
                    "default": false
                },
                "command": {
                    "type": "array",
                    "description": "Command to override all containers in the deployment",
                    "default": [
                        "sleep"
                    ],
                    "items": {
                        "type": "string"
                    }
                },
                "args": {
                    "type": "array",
                    "description": "Args to override all containers in the deployment",
                    "default": [
                        "infinity"
                    ],
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "existingConfigMap": {
            "type": "string",
            "description": "Specifies the name of an externally-defined ConfigMap to use as the configuration (this is mutually exclusive with `configInline`)",
            "default": ""
        },
        "configInline": {
            "type": "object",
            "properties": {
                "disablePermitInsecure": {
                    "type": "boolean",
                    "description": "",
                    "default": false
                },
                "tls": {
                    "type": "object",
                    "properties": {
                        "fallback-certificate": {
                            "type": "object",
                            "description": "",
                            "default": {}
                        }
                    }
                },
                "accesslog-format": {
                    "type": "string",
                    "description": "",
                    "default": "envoy"
                }
            }
        },
        "contour": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Contour Deployment creation.",
                    "default": true
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Contour image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Contour image name",
                            "default": "bitnami/contour"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Contour image tag",
                            "default": "1.25.2-debian-11-r22"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Contour image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Contour Image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Contour Image pull secrets",
                            "default": [],
                            "items": {}
                        },
                        "debug": {
                            "type": "boolean",
                            "description": "Enable image debug mode",
                            "default": false
                        }
                    }
                },
                "replicaCount": {
                    "type": "number",
                    "description": "Number of Contour Pod replicas",
                    "default": 1
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Priority class assigned to the pods",
                    "default": ""
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Name of the k8s scheduler (other than default)",
                    "default": ""
                },
                "terminationGracePeriodSeconds": {
                    "type": "string",
                    "description": "In seconds, time the given to the Contour pod needs to terminate gracefully",
                    "default": ""
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment",
                    "default": [],
                    "items": {}
                },
                "containerPorts": {
                    "type": "object",
                    "properties": {
                        "xds": {
                            "type": "number",
                            "description": "Set xds port inside Contour pod",
                            "default": 8001
                        },
                        "metrics": {
                            "type": "number",
                            "description": "Set metrics port inside Contour pod",
                            "default": 8000
                        }
                    }
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Add deployment host aliases",
                    "default": [],
                    "items": {}
                },
                "updateStrategy": {
                    "type": "object",
                    "description": "Strategy to use to update Pods",
                    "default": {}
                },
                "extraArgs": {
                    "type": "array",
                    "description": "Extra arguments passed to Contour container",
                    "default": [],
                    "items": {}
                },
                "manageCRDs": {
                    "type": "boolean",
                    "description": "Manage the creation, upgrade and deletion of Contour CRDs.",
                    "default": true
                },
                "envoyServiceNamespace": {
                    "type": "string",
                    "description": "Namespace of the envoy service to inspect for Ingress status details.",
                    "default": ""
                },
                "envoyServiceName": {
                    "type": "string",
                    "description": "Name of the envoy service to inspect for Ingress status details.",
                    "default": ""
                },
                "leaderElectionResourceName": {
                    "type": "string",
                    "description": "Name of the contour (Lease) leader election will lease.",
                    "default": ""
                },
                "ingressStatusAddress": {
                    "type": "string",
                    "description": "Address to set in Ingress object status. It is exclusive with `envoyServiceName` and `envoyServiceNamespace`.",
                    "default": ""
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Contour Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Contour Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "lifecycleHooks for the container to automate configuration before or after startup.",
                    "default": {}
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Override default liveness probe",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Override default readiness probe",
                    "default": {}
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Override default startup probe",
                    "default": {}
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Contour Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Contour Node label key to match Ignored if `affinity` is set.",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Contour Node label values to match. Ignored if `affinity` is set.",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "command": {
                    "type": "array",
                    "description": "Override default command",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default args",
                    "default": [],
                    "items": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Tolerations for Contour pod assignment",
                    "default": [],
                    "items": {}
                },
                "serviceAccount": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Create a serviceAccount for the Contour pod",
                            "default": true
                        },
                        "name": {
                            "type": "string",
                            "description": "Use the serviceAccount with the specified name, a name is generated using the fullname template",
                            "default": ""
                        },
                        "automountServiceAccountToken": {
                            "type": "boolean",
                            "description": "Automount service account token for the server service account",
                            "default": true
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Annotations for service account. Evaluated as a template. Only used if `create` is `true`.",
                            "default": {}
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Default backend Pod securityContext",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set Default backend Pod's Security Context fsGroup",
                            "default": 1001
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Envoy Container securityContext",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "User ID for the Contour container (to change this, http and https containerPorts must be set to >1024)",
                            "default": 1001
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Run as non root",
                            "default": true
                        }
                    }
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable/disable the Liveness probe",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Delay before liveness probe is initiated",
                            "default": 120
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "How often to perform the probe",
                            "default": 20
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "When the probe times out",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Minimum consecutive successes for the probe to be considered successful after having failed.",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable/disable the readiness probe",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Delay before readiness probe is initiated",
                            "default": 15
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "How often to perform the probe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "When the probe times out",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.",
                            "default": 3
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Minimum consecutive successes for the probe to be considered successful after having failed.",
                            "default": 1
                        }
                    }
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable/disable the startup probe",
                            "default": false
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Delay before startup probe is initiated",
                            "default": 15
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "How often to perform the probe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "When the probe times out",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.",
                            "default": 3
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Minimum consecutive successes for the probe to be considered successful after having failed.",
                            "default": 1
                        }
                    }
                },
                "certgen": {
                    "type": "object",
                    "properties": {
                        "serviceAccount": {
                            "type": "object",
                            "properties": {
                                "create": {
                                    "type": "boolean",
                                    "description": "Create a serviceAccount for the Contour pod",
                                    "default": true
                                },
                                "name": {
                                    "type": "string",
                                    "description": "Use the serviceAccount with the specified name, a name is generated using the fullname template",
                                    "default": ""
                                },
                                "automountServiceAccountToken": {
                                    "type": "boolean",
                                    "description": "Automount service account token for the server service account",
                                    "default": true
                                },
                                "annotations": {
                                    "type": "object",
                                    "description": "Annotations for service account. Evaluated as a template. Only used if `create` is `true`.",
                                    "default": {}
                                }
                            }
                        },
                        "certificateLifetime": {
                            "type": "number",
                            "description": "Generated certificate lifetime (in days).",
                            "default": 365
                        }
                    }
                },
                "tlsExistingSecret": {
                    "type": "string",
                    "description": "Name of the existingSecret to be use in Contour deployment. If it is not nil `contour.certgen` will be disabled.",
                    "default": ""
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Service type",
                            "default": "ClusterIP"
                        },
                        "ports": {
                            "type": "object",
                            "properties": {
                                "xds": {
                                    "type": "number",
                                    "description": "Contour service xds port",
                                    "default": 8001
                                },
                                "metrics": {
                                    "type": "number",
                                    "description": "Contour service xds port",
                                    "default": 8000
                                }
                            }
                        },
                        "nodePorts": {
                            "type": "object",
                            "properties": {
                                "xds": {
                                    "type": "string",
                                    "description": "Node port for HTTP",
                                    "default": ""
                                }
                            }
                        },
                        "clusterIP": {
                            "type": "string",
                            "description": "Contour service Cluster IP",
                            "default": ""
                        },
                        "loadBalancerIP": {
                            "type": "string",
                            "description": "Contour service Load Balancer IP",
                            "default": ""
                        },
                        "loadBalancerSourceRanges": {
                            "type": "array",
                            "description": "Contour service Load Balancer sources",
                            "default": [],
                            "items": {}
                        },
                        "loadBalancerClass": {
                            "type": "string",
                            "description": "Contour service Load Balancer Class",
                            "default": ""
                        },
                        "externalTrafficPolicy": {
                            "type": "string",
                            "description": "Contour service external traffic policy",
                            "default": "Cluster"
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Additional custom annotations for Contour service",
                            "default": {}
                        },
                        "extraPorts": {
                            "type": "array",
                            "description": "Extra port to expose on Contour service",
                            "default": [],
                            "items": {}
                        },
                        "sessionAffinity": {
                            "type": "string",
                            "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                            "default": "None"
                        },
                        "sessionAffinityConfig": {
                            "type": "object",
                            "description": "Additional settings for the sessionAffinity",
                            "default": {}
                        }
                    }
                },
                "initContainers": {
                    "type": "array",
                    "description": "Attach additional init containers to Contour pods",
                    "default": [],
                    "items": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the Contour pods",
                    "default": [],
                    "items": {}
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Array to add extra volumes",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Array to add extra mounts (normally used with extraVolumes)",
                    "default": [],
                    "items": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array containing extra env vars to be added to all Contour containers",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "ConfigMap containing extra env vars to be added to all Contour containers",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Secret containing extra env vars to be added to all Contour containers",
                    "default": ""
                },
                "ingressClass": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "Name of the ingress class to route through this controller.",
                            "default": ""
                        },
                        "create": {
                            "type": "boolean",
                            "description": "Whether to create or not the IngressClass resource",
                            "default": true
                        },
                        "default": {
                            "type": "boolean",
                            "description": "Mark IngressClass resource as default for cluster",
                            "default": true
                        }
                    }
                },
                "debug": {
                    "type": "boolean",
                    "description": "Enable Contour debug log level",
                    "default": false
                },
                "logFormat": {
                    "type": "string",
                    "description": "Set contour log-format. Default text, either text or json.",
                    "default": "text"
                },
                "kubernetesDebug": {
                    "type": "number",
                    "description": "Contour kubernetes debug log level, Default 0, minimum 0, maximum 9.",
                    "default": 0
                },
                "rootNamespaces": {
                    "type": "string",
                    "description": "Restrict Contour to searching these namespaces for root ingress routes.",
                    "default": ""
                },
                "overloadManager": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable Overload Manager",
                            "default": false
                        },
                        "maxHeapBytes": {
                            "type": "string",
                            "description": "Overload Manager's maximum heap size in bytes",
                            "default": "2147483648"
                        }
                    }
                }
            }
        },
        "envoy": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Envoy Proxy creation",
                    "default": true
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Envoy Proxy image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Envoy Proxy image repository",
                            "default": "bitnami/envoy"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Envoy Proxy image tag (immutable tags are recommended)",
                            "default": "1.26.4-debian-11-r20"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Envoy Proxy image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Envoy image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Envoy image pull secrets",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Priority class assigned to the pods",
                    "default": ""
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Name of the k8s scheduler (other than default)",
                    "default": ""
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment",
                    "default": [],
                    "items": {}
                },
                "extraArgs": {
                    "type": "array",
                    "description": "Extra arguments passed to Envoy container",
                    "default": [],
                    "items": {}
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Add deployment host aliases",
                    "default": [],
                    "items": {}
                },
                "command": {
                    "type": "array",
                    "description": "Override default command",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default args",
                    "default": [],
                    "items": {}
                },
                "shutdownManager": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Contour shutdownManager sidecar",
                            "default": true
                        },
                        "extraArgs": {
                            "type": "array",
                            "description": "Extra arguments passed to shutdown container",
                            "default": [],
                            "items": {}
                        },
                        "port": {
                            "type": "string",
                            "description": "Specify Port for shutdown container",
                            "default": "8090"
                        },
                        "containerSecurityContext": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Shutdown Manager Container securityContext",
                                    "default": true
                                },
                                "runAsUser": {
                                    "type": "number",
                                    "description": "User ID for the Shutdown Manager container (to change this, http and https containerPorts must be set to >1024)",
                                    "default": 1001
                                },
                                "runAsNonRoot": {
                                    "type": "boolean",
                                    "description": "Run as non root",
                                    "default": true
                                }
                            }
                        }
                    }
                },
                "initConfig": {
                    "type": "object",
                    "properties": {
                        "containerSecurityContext": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Envoy initconfig Container securityContext",
                                    "default": true
                                },
                                "runAsUser": {
                                    "type": "number",
                                    "description": "User ID for the Envoy initconfig container (to change this, http and https containerPorts must be set to >1024)",
                                    "default": 1001
                                },
                                "runAsNonRoot": {
                                    "type": "boolean",
                                    "description": "Run as non root",
                                    "default": true
                                }
                            }
                        }
                    }
                },
                "kind": {
                    "type": "string",
                    "description": "Install as deployment or daemonset",
                    "default": "daemonset"
                },
                "replicaCount": {
                    "type": "number",
                    "description": "Desired number of Controller pods",
                    "default": 1
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "lifecycleHooks for the container to automate configuration before or after startup.",
                    "default": {}
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "",
                            "default": "RollingUpdate"
                        }
                    }
                },
                "minReadySeconds": {
                    "type": "number",
                    "description": "The minimum number of seconds for which a newly created Pod should be ready",
                    "default": 0
                },
                "revisionHistoryLimit": {
                    "type": "number",
                    "description": "The number of old history to retain to allow rollback",
                    "default": 10
                },
                "autoscaling": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable autoscaling for Controller",
                            "default": false
                        },
                        "minReplicas": {
                            "type": "number",
                            "description": "Minimum number of Controller replicas",
                            "default": 1
                        },
                        "maxReplicas": {
                            "type": "number",
                            "description": "Maximum number of Controller replicas",
                            "default": 11
                        },
                        "targetCPU": {
                            "type": "string",
                            "description": "Target CPU utilization percentage",
                            "default": ""
                        },
                        "targetMemory": {
                            "type": "string",
                            "description": "Target Memory utilization percentage",
                            "default": ""
                        },
                        "behavior": {
                            "type": "object",
                            "description": "HPA Behavior",
                            "default": {}
                        }
                    }
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Envoy Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Envoy Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Envoy Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Envoy Node label key to match Ignored if `affinity` is set.",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Envoy Node label values to match. Ignored if `affinity` is set.",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "tolerations": {
                    "type": "array",
                    "description": "Tolerations for Envoy pod assignment",
                    "default": [],
                    "items": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Extra labels for Envoy pods",
                    "default": {}
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Envoy Pod securityContext",
                            "default": false
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "User ID for the for the mounted volumes",
                            "default": 0
                        },
                        "sysctls": {
                            "type": "array",
                            "description": "Array of sysctl options to allow",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Envoy Container securityContext",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "User ID for the Envoy container (to change this, http and https containerPorts must be set to >1024)",
                            "default": 1001
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Run as non root",
                            "default": true
                        }
                    }
                },
                "hostNetwork": {
                    "type": "boolean",
                    "description": "Envoy Pod host network access",
                    "default": false
                },
                "dnsPolicy": {
                    "type": "string",
                    "description": "Envoy Pod Dns Policy's DNS Policy",
                    "default": "ClusterFirst"
                },
                "tlsExistingSecret": {
                    "type": "string",
                    "description": "Name of the existingSecret to be use in Envoy deployment",
                    "default": ""
                },
                "serviceAccount": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Specifies whether a ServiceAccount should be created",
                            "default": true
                        },
                        "name": {
                            "type": "string",
                            "description": "The name of the ServiceAccount to use. If not set and create is true, a name is generated using the fullname template",
                            "default": ""
                        },
                        "automountServiceAccountToken": {
                            "type": "boolean",
                            "description": "Whether to auto mount API credentials for a service account",
                            "default": false
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Annotations for service account. Evaluated as a template. Only used if `create` is `true`.",
                            "default": {}
                        }
                    }
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe",
                            "default": true
                        },
                        "port": {
                            "type": "number",
                            "description": "LivenessProbe port",
                            "default": 8002
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 120
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 20
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable/disable the readiness probe",
                            "default": true
                        },
                        "port": {
                            "type": "number",
                            "description": "ReadinessProbe port",
                            "default": 8002
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Delay before readiness probe is initiated",
                            "default": 10
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "How often to perform the probe",
                            "default": 3
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "When the probe times out",
                            "default": 1
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.",
                            "default": 3
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Minimum consecutive successes for the probe to be considered successful after having failed.",
                            "default": 1
                        }
                    }
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable/disable the startup probe",
                            "default": false
                        },
                        "port": {
                            "type": "number",
                            "description": "StartupProbe port",
                            "default": 8002
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Delay before startup probe is initiated",
                            "default": 15
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "How often to perform the probe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "When the probe times out",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.",
                            "default": 3
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Minimum consecutive successes for the probe to be considered successful after having failed.",
                            "default": 1
                        }
                    }
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Override default liveness probe",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Override default readiness probe",
                    "default": {}
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Override default startup probe",
                    "default": {}
                },
                "terminationGracePeriodSeconds": {
                    "type": "number",
                    "description": "Envoy termination grace period in seconds",
                    "default": 300
                },
                "logLevel": {
                    "type": "string",
                    "description": "Envoy log level",
                    "default": "info"
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "targetPorts": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "string",
                                    "description": "",
                                    "default": "http"
                                },
                                "https": {
                                    "type": "string",
                                    "description": "",
                                    "default": "https"
                                }
                            }
                        },
                        "name": {
                            "type": "string",
                            "description": "envoy service name",
                            "default": ""
                        },
                        "type": {
                            "type": "string",
                            "description": "Type of Envoy service to create",
                            "default": "LoadBalancer"
                        },
                        "externalTrafficPolicy": {
                            "type": "string",
                            "description": "Envoy Service external cluster policy. If `envoy.service.type` is NodePort or LoadBalancer",
                            "default": "Local"
                        },
                        "labels": {
                            "type": "object",
                            "description": "Labels to add to te envoy service",
                            "default": {}
                        },
                        "clusterIP": {
                            "type": "string",
                            "description": "Internal envoy cluster service IP",
                            "default": ""
                        },
                        "externalIPs": {
                            "type": "array",
                            "description": "Envoy service external IP addresses",
                            "default": [],
                            "items": {}
                        },
                        "loadBalancerIP": {
                            "type": "string",
                            "description": "IP address to assign to load balancer (if supported)",
                            "default": ""
                        },
                        "loadBalancerSourceRanges": {
                            "type": "array",
                            "description": "List of IP CIDRs allowed access to load balancer (if supported)",
                            "default": [],
                            "items": {}
                        },
                        "loadBalancerClass": {
                            "type": "string",
                            "description": "Envoy service Load Balancer Class",
                            "default": ""
                        },
                        "ipFamilyPolicy": {
                            "type": "string",
                            "description": ", support SingleStack, PreferDualStack and RequireDualStack",
                            "default": ""
                        },
                        "ipFamilies": {
                            "type": "array",
                            "description": "List of IP families (e.g. IPv4, IPv6) assigned to the service.",
                            "default": [],
                            "items": {}
                        },
                        "ports": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "number",
                                    "description": "Sets service http port",
                                    "default": 80
                                },
                                "https": {
                                    "type": "number",
                                    "description": "Sets service https port",
                                    "default": 443
                                }
                            }
                        },
                        "nodePorts": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "string",
                                    "description": "HTTP Port. If `envoy.service.type` is NodePort and this is non-empty",
                                    "default": ""
                                },
                                "https": {
                                    "type": "string",
                                    "description": "HTTPS Port. If `envoy.service.type` is NodePort and this is non-empty",
                                    "default": ""
                                }
                            }
                        },
                        "extraPorts": {
                            "type": "array",
                            "description": "Extra ports to expose (normally used with the `sidecar` value)",
                            "default": [],
                            "items": {}
                        },
                        "sessionAffinity": {
                            "type": "string",
                            "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                            "default": "None"
                        },
                        "sessionAffinityConfig": {
                            "type": "object",
                            "description": "Additional settings for the sessionAffinity",
                            "default": {}
                        }
                    }
                },
                "useHostPort": {
                    "type": "boolean",
                    "description": "Enable/disable `hostPort` for TCP/80 and TCP/443",
                    "default": true
                },
                "useHostIP": {
                    "type": "boolean",
                    "description": "Enable/disable `hostIP`",
                    "default": false
                },
                "hostPorts": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "number",
                            "description": "Sets `hostPort` http port",
                            "default": 80
                        },
                        "https": {
                            "type": "number",
                            "description": "Sets `hostPort` https port",
                            "default": 443
                        },
                        "metrics": {
                            "type": "number",
                            "description": "Sets `hostPort` metrics port",
                            "default": 8002
                        }
                    }
                },
                "hostIPs": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "string",
                            "description": "Sets `hostIP` http IP",
                            "default": "127.0.0.1"
                        },
                        "https": {
                            "type": "string",
                            "description": "Sets `hostIP` https IP",
                            "default": "127.0.0.1"
                        },
                        "metrics": {
                            "type": "string",
                            "description": "Sets `hostIP` metrics IP",
                            "default": "127.0.0.1"
                        }
                    }
                },
                "containerPorts": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "number",
                            "description": "Sets http port inside Envoy pod  (change this to >1024 to run envoy as a non-root user)",
                            "default": 8080
                        },
                        "https": {
                            "type": "number",
                            "description": "Sets https port inside Envoy pod  (change this to >1024 to run envoy as a non-root user)",
                            "default": 8443
                        },
                        "metrics": {
                            "type": "number",
                            "description": "Sets metrics port inside Envoy pod (change this to >1024 to run envoy as a non-root user)",
                            "default": 8002
                        }
                    }
                },
                "initContainers": {
                    "type": "array",
                    "description": "Attach additional init containers to Envoy pods",
                    "default": [],
                    "items": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the Envoy pods",
                    "default": [],
                    "items": {}
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Array to add extra volumes",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Array to add extra mounts (normally used with extraVolumes)",
                    "default": [],
                    "items": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array containing extra env vars to be added to all Envoy containers",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "ConfigMap containing extra env vars to be added to all Envoy containers",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Secret containing extra env vars to be added to all Envoy containers",
                    "default": ""
                }
            }
        },
        "defaultBackend": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable a default backend based on NGINX",
                    "default": false
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Default backend image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Default backend image name",
                            "default": "bitnami/nginx"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Default backend image tag",
                            "default": "1.25.2-debian-11-r2"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Default backend image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Specify docker-registry secret names as an array",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "lifecycleHooks for the container to automate configuration before or after startup.",
                    "default": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array containing extra env vars to be added to all Contour containers",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "ConfigMap containing extra env vars to be added to all Contour containers",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Secret containing extra env vars to be added to all Contour containers",
                    "default": ""
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Array to add extra volumes",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Array to add extra mounts (normally used with extraVolumes)",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Attach additional init containers to the http backend pods",
                    "default": [],
                    "items": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the default backend",
                    "default": [],
                    "items": {}
                },
                "containerPorts": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "number",
                            "description": "Set http port inside Contour pod",
                            "default": 8001
                        }
                    }
                },
                "updateStrategy": {
                    "type": "object",
                    "description": "Strategy to use to update Pods",
                    "default": {}
                },
                "command": {
                    "type": "array",
                    "description": "Override default command",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default args",
                    "default": [],
                    "items": {}
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Add deployment host aliases",
                    "default": [],
                    "items": {}
                },
                "replicaCount": {
                    "type": "number",
                    "description": "Desired number of default backend pods",
                    "default": 1
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Default backend Pod securityContext",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set Default backend Pod's Security Context fsGroup",
                            "default": 1001
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Default backend container securityContext",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "User ID for the Envoy container (to change this, http and https containerPorts must be set to >1024)",
                            "default": 1001
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Run as non root",
                            "default": true
                        }
                    }
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 30
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 3
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 0
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 5
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable/disable the startup probe",
                            "default": false
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Delay before startup probe is initiated",
                            "default": 15
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "How often to perform the probe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "When the probe times out",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.",
                            "default": 3
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Minimum consecutive successes for the probe to be considered successful after having failed.",
                            "default": 1
                        }
                    }
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Override default startup probe",
                    "default": {}
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Priority class assigned to the pods",
                    "default": ""
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Name of the k8s scheduler (other than default)",
                    "default": ""
                },
                "terminationGracePeriodSeconds": {
                    "type": "number",
                    "description": "In seconds, time the given to the default backend pod needs to terminate gracefully",
                    "default": 60
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment",
                    "default": [],
                    "items": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Node label key to match. Ignored if `affinity` is set.",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Node label values to match. Ignored if `affinity` is set.",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "tolerations": {
                    "type": "array",
                    "description": "Tolerations for pod assignment. Evaluated as a template.",
                    "default": [],
                    "items": {}
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Service type",
                            "default": "ClusterIP"
                        },
                        "ports": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "number",
                                    "description": "Service port",
                                    "default": 80
                                }
                            }
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Annotations to add to the service",
                            "default": {}
                        }
                    }
                },
                "pdb": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Enable Pod Disruption Budget configuration",
                            "default": false
                        },
                        "minAvailable": {
                            "type": "number",
                            "description": "Minimum number/percentage of Default backend pods that should remain scheduled",
                            "default": 1
                        },
                        "maxUnavailable": {
                            "type": "string",
                            "description": "Maximum number/percentage of Default backend pods that should remain scheduled",
                            "default": ""
                        }
                    }
                }
            }
        },
        "ingress": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Ingress configuration enabled",
                    "default": false
                },
                "apiVersion": {
                    "type": "string",
                    "description": "Force Ingress API version (automatically detected if not set)",
                    "default": ""
                },
                "certManager": {
                    "type": "boolean",
                    "description": "Add annotations for cert-manager",
                    "default": false
                },
                "annotations": {
                    "type": "object",
                    "description": "Annotations to be added to the web ingress.",
                    "default": {}
                },
                "hostname": {
                    "type": "string",
                    "description": "Hostname for the Ingress object",
                    "default": "contour.local"
                },
                "path": {
                    "type": "string",
                    "description": "The Path to Concourse",
                    "default": "/"
                },
                "rulesOverride": {
                    "type": "array",
                    "description": "Ingress rules override",
                    "default": [],
                    "items": {}
                },
                "selfSigned": {
                    "type": "boolean",
                    "description": "Create a TLS secret for this ingress record using self-signed certificates generated by Helm",
                    "default": false
                },
                "ingressClassName": {
                    "type": "string",
                    "description": "IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)",
                    "default": ""
                },
                "extraPaths": {
                    "type": "array",
                    "description": "Add additional arbitrary paths that may need to be added to the ingress under the main host.",
                    "default": [],
                    "items": {}
                },
                "tls": {
                    "type": "boolean",
                    "description": "TLS configuration.",
                    "default": false
                },
                "pathType": {
                    "type": "string",
                    "description": "Ingress Path type",
                    "default": "ImplementationSpecific"
                },
                "extraHosts": {
                    "type": "array",
                    "description": "The list of additional hostnames to be covered with this ingress record.",
                    "default": [],
                    "items": {}
                },
                "extraTls": {
                    "type": "array",
                    "description": "The tls configuration for additional hostnames to be covered with this ingress record.",
                    "default": [],
                    "items": {}
                },
                "secrets": {
                    "type": "array",
                    "description": "If you're providing your own certificates, please use this to add the certificates as secrets",
                    "default": [],
                    "items": {}
                },
                "extraRules": {
                    "type": "array",
                    "description": "Additional rules to be covered with this ingress record",
                    "default": [],
                    "items": {}
                }
            }
        },
        "metrics": {
            "type": "object",
            "properties": {
                "serviceMonitor": {
                    "type": "object",
                    "properties": {
                        "namespace": {
                            "type": "string",
                            "description": "Specify if the servicemonitors will be deployed into a different namespace (blank deploys into same namespace as chart)",
                            "default": ""
                        },
                        "enabled": {
                            "type": "boolean",
                            "description": "Specify if a servicemonitor will be deployed for prometheus-operator.",
                            "default": false
                        },
                        "jobLabel": {
                            "type": "string",
                            "description": "Specify the jobLabel to use for the prometheus-operator",
                            "default": "app.kubernetes.io/name"
                        },
                        "interval": {
                            "type": "string",
                            "description": "Specify the scrape interval if not specified use default prometheus scrapeIntervall, the Prometheus default scrape interval is used.",
                            "default": ""
                        },
                        "metricRelabelings": {
                            "type": "array",
                            "description": "Specify additional relabeling of metrics.",
                            "default": [],
                            "items": {}
                        },
                        "relabelings": {
                            "type": "array",
                            "description": "Specify general relabeling.",
                            "default": [],
                            "items": {}
                        },
                        "honorLabels": {
                            "type": "boolean",
                            "description": "Specify honorLabels parameter to add the scrape endpoint",
                            "default": false
                        },
                        "scrapeTimeout": {
                            "type": "string",
                            "description": "The timeout after which the scrape is ended",
                            "default": ""
                        },
                        "selector": {
                            "type": "object",
                            "description": "Specify honorLabels parameter to add the scrape endpoint",
                            "default": {}
                        },
                        "labels": {
                            "type": "object",
                            "description": "Extra labels for the ServiceMonitor",
                            "default": {}
                        }
                    }
                },
                "prometheusRule": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Creates a Prometheus Operator prometheusRule",
                            "default": false
                        },
                        "namespace": {
                            "type": "string",
                            "description": "Namespace for the prometheusRule Resource (defaults to the Release Namespace)",
                            "default": ""
                        },
                        "additionalLabels": {
                            "type": "object",
                            "description": "Additional labels that can be used so prometheusRule will be discovered by Prometheus",
                            "default": {}
                        },
                        "rules": {
                            "type": "array",
                            "description": "Prometheus Rule definitions",
                            "default": [],
                            "items": {}
                        }
                    }
                }
            }
        },
        "rbac": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Create the RBAC roles for API accessibility",
                    "default": true
                },
                "rules": {
                    "type": "array",
                    "description": "Custom RBAC rules to set",
                    "default": [],
                    "items": {}
                }
            }
        },
        "tlsExistingSecret": {
            "type": "string",
            "description": "Name of the existingSecret to be use in both contour and envoy. If it is not nil `contour.certgen` will be disabled.",
            "default": ""
        }
    }
}