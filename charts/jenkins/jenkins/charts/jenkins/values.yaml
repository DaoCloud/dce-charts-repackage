image:
  registry: docker.io
nameOverride: "jenkins"
fullnameOverride: ""
pullPolicy: IfNotPresent
plugins:
# if "Values.eventProxy.enable" is "true", will use sidecar model to send event first;
# if "receiver" not empty, will use receiver to send event;
# otherwise, will send event to "http://amamba-devops-server.targetNamespace:80/apis/internel.amamba.io/devops/pipeline/v1alpha1/webhooks/jenkins".
  eventDispatcher:
    receiver: ""

Master:
  StatefulSet:
    Enabled: false
    Replicas: 1
    # StatefulSetUpdateStrategy must be 'RollingUpdate' or 'OnDelete'
    UpdateStrategy: RollingUpdate
    # Name of the Kubernetes scheduler to use
    SchedulerName: ""
  Name: jenkins-master
  Image: "amambadev/jenkins"
  ImageTag: "v0.2.0-alpha.1-2.413"
  ImagePullPolicy: "IfNotPresent"
  ImagePullSecret: ""
  Component: "jenkins-master"
  TZ: "Asia/Shanghai"
  UseSecurity: true
  HostNetworking: false
  AdminUser: admin
  AdminPassword: Admin01
  resources: {}
    # requests:
    #   cpu: "1"
    #   memory: "799Mi"
    # limits:
    #   cpu: "2"
    #   memory: "4096Mi"

  UsePodSecurityContext: true
  JavaOpts: |-
    -XX:MaxRAMPercentage=70.0 
    -XX:MinHeapFreeRatio=8
    -XX:MaxHeapFreeRatio=15
    -XX:MinRAMPercentage=20.0
    -XX:-UseAdaptiveSizePolicy
    -XX:-ShrinkHeapInSteps
    -Dhudson.slaves.NodeProvisioner.initialDelay=20
    -Dhudson.slaves.NodeProvisioner.MARGIN=50
    -Dhudson.slaves.NodeProvisioner.MARGIN0=0.85
    -Dhudson.model.LoadStatistics.clock=5000
    -Dhudson.model.LoadStatistics.decay=0.2
    -Dhudson.slaves.NodeProvisioner.recurrencePeriod=5000
    -Dhudson.security.csrf.DefaultCrumbIssuer.EXCLUDE_SESSION_ID=true
    -Dio.jenkins.plugins.casc.ConfigurationAsCode.initialDelay=10000
    -Djenkins.install.runSetupWizard=false
    -XX:+UseG1GC
    -XX:+UseStringDeduplication
    -XX:+ParallelRefProcEnabled
    -XX:+DisableExplicitGC
    -XX:+UnlockDiagnosticVMOptions
    -XX:+UnlockExperimentalVMOptions
  Deploy:
    NotWithApiServer: false
    # If the cluster where jenkins is deployed and amamba-apiserver are not in the same cluster, you need to fill in this item
    JenkinsHost: ""
  ServicePort: 80
  ServiceType: ClusterIP
  NodePort: 31767
  ServiceAnnotations: {}
  Casc:
    # Maximum number of parallel pipelines
    maxParallelRuns: 2

  # Ingress:
  #   Annotations:
  #     nginx.ingress.kubernetes.io/ssl-redirect: "false"
  #     nginx.ingress.kubernetes.io/proxy-body-size: 50m
  #     nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
  #     ingress.kubernetes.io/ssl-redirect: "false"
  #     ingress.kubernetes.io/proxy-body-size: 50m
  #     ingress.kubernetes.io/proxy-request-buffering: "off"
  HostName:

  HealthProbes: true
  livenessProbe:
    initialDelaySeconds: 90
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 12
    successThreshold: 1
  readinessProbe:
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  SlaveListenerPort: 50000
  DisabledAgentProtocols:
    - JNLP-connect
    - JNLP2-connect
  CSRF:
    DefaultCrumbIssuer:
      Enabled: true
      ProxyCompatability: true
  CLI: false
  # Kubernetes service type for the JNLP slave service
  # SETTING THIS TO "LoadBalancer" IS A HUGE SECURITY RISK: https://github.com/kubernetes/charts/issues/1341
  SlaveListenerServiceType: ClusterIP
  SlaveListenerServiceAnnotations: {}
  LoadBalancerSourceRanges:
  - 0.0.0.0/0

  ContainerEnv:
    - name: CASC_JENKINS_CONFIG
      value: "/var/jenkins_home/casc_configs/"
    - name: CASC_MERGE_STRATEGY
      value: override
    - name: kubernetes.connection.timeout
      value: "60000"
    - name: kubernetes.request.timeout
      value: "60000"
    - name: EMAIL_SMTP_HOST
      value: "mail.example.com"
    - name: EMAIL_SMTP_PORT
      value: "465"
    - name: EMAIL_USE_SSL
      value: "false"
    - name: EMAIL_FROM_NAME
      value: "Jenkins"
    - name: EMAIL_FROM_ADDR
      value: "admin@example.com"
    - name: EMAIL_FROM_PASS
      value: "P@ssw0rd"

  InitScripts:
#    TimeZone:
#      System.setProperty('org.apache.commons.jelly.tags.fmt.timeZone', 'Asia/Shanghai')

    Mailer: |-
      import jenkins.model.*

      def env = System.getenv()

      def emailFromName = env.EMAIL_FROM_NAME
      def emailFromAddr = env.EMAIL_FROM_ADDR

      def locationConfig = JenkinsLocationConfiguration.get()
      locationConfig.adminAddress = "${emailFromName} <${emailFromAddr}>"
      locationConfig.save()

      def mailer = Jenkins.instance.getDescriptor("hudson.tasks.Mailer")
      mailer.setSmtpAuth(emailFromAddr, env.EMAIL_FROM_PASS)
      mailer.setReplyToAddress("no-reply@k8s.io")
      mailer.setSmtpHost(env.EMAIL_SMTP_HOST)
      mailer.setUseSsl(env.EMAIL_USE_SSL.toBoolean())
      mailer.setSmtpPort(env.EMAIL_SMTP_PORT)
      mailer.save()

    K8sCredentials: |-
      import com.cloudbees.plugins.credentials.CredentialsScope
      import com.cloudbees.plugins.credentials.SystemCredentialsProvider
      import com.cloudbees.plugins.credentials.domains.Domain
      import org.csanchez.jenkins.plugins.kubernetes.ServiceAccountCredential

      def addKubeCredential(String credentialId) {
        def kubeCredential = new ServiceAccountCredential(CredentialsScope.GLOBAL, credentialId, 'Kubernetes service account')
        SystemCredentialsProvider.getInstance().getStore().addCredentials(Domain.global(), kubeCredential)
      }

      addKubeCredential('k8s-service-account')
    RBAC: |-
      import hudson.*
      import hudson.model.*
      import hudson.security.*
      import jenkins.*
      import jenkins.model.*
      import java.util.*
      import com.michelin.cio.hudson.plugins.rolestrategy.*
      import java.lang.reflect.*
      import com.synopsys.arc.jenkins.plugins.rolestrategy.*

      def env = System.getenv()

      // Roles
      def globalRoleRead = "amamba-user"
      def globalRoleAdmin = "admin"
      def UserNameAdmin = "admin"

      def jenkinsInstance = Jenkins.getInstance()
      def currentAuthenticationStrategy = Hudson.instance.getAuthorizationStrategy()
      if (currentAuthenticationStrategy instanceof RoleBasedAuthorizationStrategy) {
        println "Role based authorisation already enabled."
        println "Exiting script..."
        return
      } else {
          println "Enabling role based authorisation strategy..."
      }

      // Set new authentication strategy
      RoleBasedAuthorizationStrategy roleBasedAuthenticationStrategy = new RoleBasedAuthorizationStrategy()
      jenkinsInstance.setAuthorizationStrategy(roleBasedAuthenticationStrategy)

      Constructor[] constrs = Role.class.getConstructors();
      for (Constructor<?> c : constrs) {
          c.setAccessible(true);
      }

      // Make the method assignRole accessible
      Method assignRoleMethod = RoleBasedAuthorizationStrategy.class.getDeclaredMethod("assignRole", RoleType.class, Role.class, String.class);
      assignRoleMethod.setAccessible(true);

      // Create admin set of permissions
      Set<Permission> adminPermissions = new HashSet<Permission>();
      adminPermissions.add(Permission.fromId("hudson.model.View.Delete"));
      adminPermissions.add(Permission.fromId("hudson.model.Computer.Connect"));
      adminPermissions.add(Permission.fromId("hudson.model.Run.Delete"));
      adminPermissions.add(Permission.fromId("com.cloudbees.plugins.credentials.CredentialsProvider.ManageDomains"));
      adminPermissions.add(Permission.fromId("hudson.model.Computer.Create"));
      adminPermissions.add(Permission.fromId("hudson.model.View.Configure"));
      adminPermissions.add(Permission.fromId("hudson.model.Computer.Build"));
      adminPermissions.add(Permission.fromId("hudson.model.Item.Configure"));
      adminPermissions.add(Permission.fromId("hudson.model.Hudson.Administer"));
      adminPermissions.add(Permission.fromId("hudson.model.Item.Cancel"));
      adminPermissions.add(Permission.fromId("hudson.model.Item.Read"));
      adminPermissions.add(Permission.fromId("com.cloudbees.plugins.credentials.CredentialsProvider.View"));
      adminPermissions.add(Permission.fromId("hudson.model.Computer.Delete"));
      adminPermissions.add(Permission.fromId("hudson.model.Item.Build"));
      adminPermissions.add(Permission.fromId("hudson.scm.SCM.Tag"));
      adminPermissions.add(Permission.fromId("hudson.model.Item.Discover"));
      adminPermissions.add(Permission.fromId("hudson.model.Hudson.Read"));
      adminPermissions.add(Permission.fromId("com.cloudbees.plugins.credentials.CredentialsProvider.Update"));
      adminPermissions.add(Permission.fromId("hudson.model.Item.Create"));
      adminPermissions.add(Permission.fromId("hudson.model.Item.Move"));
      adminPermissions.add(Permission.fromId("hudson.model.Item.Workspace"));
      adminPermissions.add(Permission.fromId("com.cloudbees.plugins.credentials.CredentialsProvider.Delete"));
      adminPermissions.add(Permission.fromId("hudson.model.View.Read"));
      adminPermissions.add(Permission.fromId("hudson.model.View.Create"));
      adminPermissions.add(Permission.fromId("hudson.model.Item.Delete"));
      adminPermissions.add(Permission.fromId("hudson.model.Computer.Configure"));
      adminPermissions.add(Permission.fromId("com.cloudbees.plugins.credentials.CredentialsProvider.Create"));
      adminPermissions.add(Permission.fromId("hudson.model.Computer.Disconnect"));
      adminPermissions.add(Permission.fromId("hudson.model.Run.Update"));
      adminPermissions.add(Permission.fromId("hudson.model.Run.Replay"));

      // Create the admin Role
      Role adminRole = new Role(globalRoleAdmin, adminPermissions);
      roleBasedAuthenticationStrategy.addRole(RoleType.Global, adminRole);

      // Assign the role
      roleBasedAuthenticationStrategy.assignRole(RoleType.Global, adminRole, UserNameAdmin);
      println "Admin role created...OK"

      /// Read access for authenticated users
      // Create permissions
      Set<Permission> authenticatedPermissions = new HashSet<Permission>();
      authenticatedPermissions.add(Permission.fromId("hudson.model.Hudson.Read"));

      Role authenticatedRole = new Role(globalRoleRead, authenticatedPermissions);
      roleBasedAuthenticationStrategy.addRole(RoleType.Global, authenticatedRole);

      // Assign the role
      roleBasedAuthenticationStrategy.assignRole(RoleType.Global, authenticatedRole, 'authenticated');
      println "Read role created...OK"

      // Save the state
      println "Saving changes."
      jenkinsInstance.save()
    Users: |-
      import jenkins.model.*
      import hudson.security.*

      def adminUsername = System.getenv('ADMIN_USER')
      // println "user: ${adminUsername}"
      def adminPassword = System.getenv('ADMIN_PASSWORD')
      // println "password: ${adminPassword}"
      // avoid reset the user
      if (hudson.model.User.getById(adminUsername, false) == null) {
        def hudsonRealm = new HudsonPrivateSecurityRealm(false)
        hudsonRealm.createAccount(adminUsername, adminPassword)

        def instance = Jenkins.getInstance()
        instance.setSecurityRealm(hudsonRealm)
        instance.save()
      }

  CustomConfigMap: false
  # By default, the configMap is only used to set the initial config the first time
  # that the chart is installed.  Setting `OverwriteConfig` to `true` will overwrite
  # the jenkins config with the contents of the configMap every time the pod starts.
  OverwriteConfig: false
  # Node labels and tolerations for pod assignment
  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature
  NodeSelector: {}
  Tolerations: {}
  PodAnnotations: {}

  Ingress:
    ApiVersion: networking.k8s.io/v1
    Annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"

    TLS:
    # - secretName: jenkins.cluster.local
    #   hosts:
    #     - jenkins.cluster.local

Agent:
  Enabled: true
  Image: "jenkins/inbound-agent"
  ImageTag: 4.10-2
  CustomJenkinsLabels: []
  Component: "jenkins-inbound-agent"
  Privileged: false
  WorkerNamespace:
  ResourceQuota:
    Enabled: false
  # Default resource settings for Jenkins agents running on Kubernetes
  resources:
    requests:
      cpu: "200m"
      memory: "256Mi"
    limits:
      cpu: "200m"
      memory: "256Mi"
  # You may want to change this to true while testing a new image
  AlwaysPullImage: false
  # Controls how agent pods are retained after the Jenkins build completes
  # Possible values: Always, Never, OnFailure
  PodRetention: Never
  # You can define the volumes that you want to mount for this container
  # Allowed types are: ConfigMap, EmptyDir, HostPath, Nfs, Pod, Secret
  # Configure the attributes as they appear in the corresponding Java class for that type
  # https://github.com/jenkinsci/kubernetes-plugin/tree/master/src/main/java/org/csanchez/jenkins/plugins/kubernetes/volumes
  volumes:
  # - type: Secret
  #   secretName: mysecret
  #   mountPath: /var/myapp/mysecret
  NodeSelector: {}
  # Key Value selectors. Ex:
  # jenkins-agent: v1

  Builder:
    Base:
      Image: amambadev/jenkins-agent-base
      ImageTag: v0.2.0-alpha.1
    NodeJs16:
      Image: amambadev/jenkins-agent-nodejs
      ImageTag: v0.2.0-alpha.1
    Maven:
      Image: amambadev/jenkins-agent-maven
      ImageTag: v0.2.0-alpha.1-jdk1.8
    Mavenjdk11:
      Image: amambadev/jenkins-agent-maven
      ImageTag: v0.2.0-alpha.1-jdk11
    Golang:
      Image: amambadev/jenkins-agent-go
      ImageTag: v0.2.0-alpha.1
    Python:
      Image: amambadev/jenkins-agent-python
      ImageTag: v0.2.0-alpha.1
    ContainerRuntime: podman # Available values: docker, podman

Persistence:
  Enabled: true
  # if "-" use default sc.you can specify other sc,like: hwameistor-storage-lvm-hdd, hwameistor-storage-lvm-hdd-ha
  StorageClass: "-"
#  ExistingClaim: ""

  Annotations: {}
  AccessMode: ReadWriteOnce
  Size: 8Gi
  volumes:
    - name: casc-config
      configMap:
        name: jenkins-casc-config
  mounts:
    - name: casc-config
      mountPath: /var/jenkins_home/casc_configs
      readOnly: true

NetworkPolicy:
  # Enable creation of NetworkPolicy resources.
  Enabled: false
  # For Kubernetes v1.4, v1.5 and v1.6, use 'extensions/v1beta1'
  # For Kubernetes v1.7, use 'networking.k8s.io/v1'
  ApiVersion: networking.k8s.io/v1

## Install Default RBAC roles and bindings
rbac:
  install: true
  serviceAccountName: default
  # Role reference
  roleRef: cluster-admin
  # Role kind (RoleBinding or ClusterRoleBinding)
  roleBindingKind: ClusterRoleBinding

securityRealm:
  type: local # support values include local, ldap

# Install service monitor
prometheus:
  namespace: ""
  serviceMonitor:
    disabled: false
    labels: { }
  prometheusRule:
    disabled: false
    labels:
      custom-alerting-rule-level: cluster
      role: thanos-alerting-rules
      thanosruler: thanos-rule
    alertRules: [ ]

eventProxy:
  enabled: false
  image:
    registry: release.daocloud.io
    repository: amamba/amamba-event-proxy
    tag: "v0.18.0-alpha.0"
  imagePullPolicy: IfNotPresent
  configMap:
    eventProxy:
      host: "amamba-devops-server.amamba-system:80"
      proto: "http"
      webhookUrl: "/apis/internel.amamba.io/devops/pipeline/v1alpha1/webhooks/jenkins"
      token: ""
    discardStrategy: retry
    timeout: 3000
    retryConfig:
      maxRetryTimes: 3
      retryBackoffDuration: 100
      retryBackoffMaxDuration: 5000
      retryMaxJitter: 1000
    rateLimiterConfig:
      qps: 1000                
      burst: 100
  resources: {}
    #  requests:
    #    cpu: 100m
    #    memory: 100Mi
    #  limits:
    #    cpu: 200m
    #    memory: 200Mi

trace:
  enabled: false
  image:
    registry: ghcr.io
    repository: open-telemetry/opentelemetry-operator/autoinstrumentation-java
    tag: 1.17.0