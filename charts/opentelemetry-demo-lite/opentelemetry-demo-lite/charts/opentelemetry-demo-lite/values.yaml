global:
  opentelemetryDemo:
    image:
      registry: ghcr.m.daocloud.io
      repository: openinsight-proj/demo
    busyboxImage:
      registry: docker.m.daocloud.io
      repository: rancher/busybox
      tag: "1.31.1"
    istioSidecar:
      enabled: false
  observability:
    adServiceJVMEnable: true
  microservices:
    nacos:
      enabled: false
      registryAddr: ""
      registryNamespace: $(NACOS_NAMESPACE_ID)
      registryServiceGroup: $(NACOS_GROUP_NAME)
      registryInstanceGroup: DEFAULT
      kubeMetadataClusterName: ""
      username: ""
      password: ""
    sentinel:
      enabled: false
  middleware:
    redis:
      # enum: builtin or redisCR
      deployBy: "builtin"

extensions:
  mysql:
    # this value is not in used, it replaces by global.microservices.nacos.enabled
    enabled: true
    image:
      registry: docker.m.daocloud.io
      repository: bitnami/mysql
      tag: "8.0"
  redis:
    redisCRResource:
      redisExporterImage:
        registry: quay.m.daocloud.io
        repository: opstree/redis-exporter
        tag: "v1.44.0"
      image:
        registry: quay.m.daocloud.io
        repository: opstree/redis
        tag: "v7.0.5"
    image:
      registry: quay.m.daocloud.io
      repository: opstree/redis
      tag: "v7.0.5"
  dataservice:
    # this value is not in used, it replaces by global.microservices.nacos.enabled
    enabled: true
    image:
      registry: ghcr.m.daocloud.io
      repository: openinsight-proj/demo
      tag: "993ff3d8b4548b4da08c4fb748dced2bdd20ba43-dataservice"
      pullPolicy: Always
    servcie:
      type: ClusterIP
    ports:
      - name: http
        containerPort: 8080
        protocol: TCP
      - name: health-http
        containerPort: 8999
        protocol: TCP
    env:
      - name: OTEL_SERVICE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: "metadata.labels['app.kubernetes.io/name']"
      - name: K8S_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: OTEL_RESOURCE_ATTRIBUTES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: OTEL_RESOURCE_ATTRIBUTES_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: OTEL_RESOURCE_ATTRIBUTES_POD_UID
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.uid
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: 'http://insight-agent-opentelemetry-collector.insight-system.svc.cluster.local:4317'
      - name: NACOS_NAMESPACE_ID
        value: public
      - name: NACOS_GROUP_NAME
        value: DEFAULT_GROUP
      - name: SKOALA_REGISTRY
        value: nacos-test
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: -Dspring.application.name=$(OTEL_SERVICE_NAME),k8s.namespace.name=$(K8S_NAMESPACE),k8s.node.name=$(OTEL_RESOURCE_ATTRIBUTES_NODE_NAME),k8s.pod.name=$(OTEL_RESOURCE_ATTRIBUTES_POD_NAME),k8s.pod.uid=$(OTEL_RESOURCE_ATTRIBUTES_POD_UID),skoala.registry=$(SKOALA_REGISTRY),nacos.namespaceid=$(NACOS_NAMESPACE_ID),nacos.groupname=$(NACOS_GROUP_NAME)
    podAnnotations:
      instrumentation.opentelemetry.io/inject-sdk: "insight-system/insight-opentelemetry-autoinstrumentation"
      insight.opentelemetry.io/metric-scrape: "true"
      insight.opentelemetry.io/metric-path: "/"
      insight.opentelemetry.io/metric-port: "9464"
  cartservice:
    enabled: true
    image:
      registry: ghcr.m.daocloud.io
      repository: openinsight-proj/demo
      tag: "v1.3.2-cartservice"
    busyboxImage:
      registry: docker.m.daocloud.io
      repository: rancher/busybox
      tag: "1.31.1"
  adservice:
    enabled: true
    image:
      registry: ghcr.m.daocloud.io
      repository: openinsight-proj/demo
      tag: "ce8efa5113e52421612cae34e76875fd4a95ace1-adservice-v2"
      pullPolicy: Always
    servcie:
      type: NodePort
    ports:
      - name: service-grpc
        containerPort: 8080
        protocol: TCP
      - name: rest-http
        containerPort: 8081
        protocol: TCP
      - name: health-http
        containerPort: 8999
        protocol: TCP
      - name: jmx-metrics
        containerPort: 12345
        protocol: TCP
      - name: custom-metrics
        containerPort: 8888
        protocol: TCP
      - name: jvm-metrics
        containerPort: 9464
        protocol: TCP
    env:
      - name: OTEL_SERVICE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: "metadata.labels['app.kubernetes.io/name']"
      - name: K8S_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: OTEL_RESOURCE_ATTRIBUTES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: OTEL_RESOURCE_ATTRIBUTES_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: OTEL_RESOURCE_ATTRIBUTES_POD_UID
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.uid
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: 'http://insight-agent-opentelemetry-collector.insight-system.svc.cluster.local:4317'
      - name: NACOS_NAMESPACE_ID
        value: public
      - name: NACOS_GROUP_NAME
        value: DEFAULT_GROUP
      - name: SKOALA_REGISTRY
        value: nacos-test
      - name: AD_SERVICE_PORT
        value: "8080"
      - name: OTEL_RESOURCE_ATTRIBUTES
        value: -Dspring.application.name=$(OTEL_SERVICE_NAME),k8s.namespace.name=$(K8S_NAMESPACE),k8s.node.name=$(OTEL_RESOURCE_ATTRIBUTES_NODE_NAME),k8s.pod.name=$(OTEL_RESOURCE_ATTRIBUTES_POD_NAME),k8s.pod.uid=$(OTEL_RESOURCE_ATTRIBUTES_POD_UID),skoala.registry=$(SKOALA_REGISTRY),nacos.namespaceid=$(NACOS_NAMESPACE_ID),nacos.groupname=$(NACOS_GROUP_NAME)
    podAnnotations:
      instrumentation.opentelemetry.io/inject-sdk: "insight-system/insight-opentelemetry-autoinstrumentation"
      insight.opentelemetry.io/metric-scrape: "true"
      insight.opentelemetry.io/metric-path: "/"
      insight.opentelemetry.io/metric-port: "12345"

opentelemetry-demo:
  enabled: true

  default:
    image:
      repository: ghcr.m.daocloud.io/openinsight-proj/demo
      tag: "v1.4.0-beta-daocloud"

  serviceAccount:
    create: false

  components:
    checkoutService:
      enabled: true
      imageOverride:
        tag: "eaad6dbdbbf8dfa8b09c83b945cd09e6e68363d0-checkoutservice-v2"
      useDefault:
        env: false
      env:
        - name: CHECKOUT_SERVICE_PORT
          value: "8080"
        - name: CART_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-cartservice:8080'
        - name: PAYMENT_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-paymentservice:8080'
        - name: PRODUCT_CATALOG_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-productcatalogservice:8080'
        - name: SHIPPING_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-shippingservice:8080'
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: 'http://insight-agent-opentelemetry-collector.insight-system.svc.cluster.local:4317'
      podAnnotations:
        instrumentation.opentelemetry.io/inject-sdk: "insight-system/insight-opentelemetry-autoinstrumentation"
      resources:
        requests:
          cpu: "0.2"
          memory: 100Mi
        limits:
          cpu: "0.5"
          memory: 512Mi
      initContainers:
        # this is use for rewrite official initContainer
        - name: dumpy
          image: "{{ .global.opentelemetryDemo.busyboxImage.registry }}/{{ .global.opentelemetryDemo.busyboxImage.repository }}:{{ .global.opentelemetryDemo.busyboxImage.tag }}"
          command: [ 'echo', 'Hello World!' ]
          resources:
            requests:
              cpu: "0.2"
              memory: 100Mi
            limits:
              cpu: "0.5"
              memory: 512Mi

    frontend:
      enabled: true
      imageOverride:
        tag: "v1.4.0-beta-daocloud-frontend"
      useDefault:
        env: false
      env:
        - name: FRONTEND_PORT
          value: "8080"
        - name: FRONTEND_ADDR
          value: :8080
        - name: AD_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-adservice:8080'
        - name: CART_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-cartservice:8080'
        - name: CHECKOUT_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-checkoutservice:8080'
        - name: CURRENCY_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-currencyservice:8080'
        - name: PRODUCT_CATALOG_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-productcatalogservice:8080'
        - name: RECOMMENDATION_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-recommendationservice:8080'
        - name: SHIPPING_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-shippingservice:8080'
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: 'http://insight-agent-opentelemetry-collector.insight-system.svc.cluster.local:4317'
        - name: WEB_OTEL_SERVICE_NAME
          value: frontend-web
        - name: PUBLIC_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
          value: http://localhost:4318/v1/traces             # This expects users to use `kubectl port-forward ...`
      podAnnotations:
        instrumentation.opentelemetry.io/inject-sdk: "insight-system/insight-opentelemetry-autoinstrumentation"
      resources:
        requests:
          cpu: "0.2"
          memory: 100Mi
        limits:
          cpu: "0.5"
          memory: 512Mi

    loadgenerator:
      enabled: true
      imageOverride:
        tag: "v1.4.0-beta-daocloud-loadgenerator"
      useDefault:
        env: false
      env:
        - name: LOCUST_WEB_PORT
          value: "8089"
        - name: LOCUST_USERS
          value: "10"
        - name: LOCUST_SPAWN_RATE
          value: "1"
        - name: LOCUST_HOST
          value: 'http://{{ include "otel-demo.name" . }}-frontend:8080'
        - name: LOCUST_HEADLESS
          value: "false"
        - name: LOCUST_AUTOSTART
          value: "true"
        - name: PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION
          value: python
        - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
          value: 'http://insight-agent-opentelemetry-collector.insight-system.svc.cluster.local:4318/v1/traces'
      podAnnotations:
        instrumentation.opentelemetry.io/inject-sdk: "insight-system/insight-opentelemetry-autoinstrumentation"
      resources:
        requests:
          cpu: "0.2"
          memory: 100Mi
        limits:
          cpu: "0.5"
          memory: 512Mi

    paymentService:
      enabled: true
      imageOverride:
        tag: "v1.4.0-beta-daocloud-paymentservice"
      useDefault:
        env: false
      env:
        - name: PAYMENT_SERVICE_PORT
          value: "8080"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: 'http://insight-agent-opentelemetry-collector.insight-system.svc.cluster.local:4317'
      podAnnotations:
        instrumentation.opentelemetry.io/inject-sdk: "insight-system/insight-opentelemetry-autoinstrumentation"
      resources:
        requests:
          cpu: "0.2"
          memory: 100Mi
        limits:
          cpu: "0.5"
          memory: 512Mi

    productCatalogService:
      enabled: true
      imageOverride:
        tag: "v1.4.0-beta-daocloud-productcatalogservice"
      useDefault:
        env: false
      env:
        - name: PRODUCT_CATALOG_SERVICE_PORT
          value: "8080"
        - name: FEATURE_FLAG_GRPC_SERVICE_ADDR
          value: '{{ include "otel-demo.name" . }}-featureflagservice:50053'
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: 'http://insight-agent-opentelemetry-collector.insight-system.svc.cluster.local:4317'
      podAnnotations:
        instrumentation.opentelemetry.io/inject-sdk: "insight-system/insight-opentelemetry-autoinstrumentation"
      resources:
        requests:
          cpu: "0.2"
          memory: 100Mi
        limits:
          cpu: "0.5"
          memory: 512Mi

    quoteService:
      enabled: true
      imageOverride:
        tag: "v1.4.0-beta-daocloud-quoteservice"
      useDefault:
        env: false
      service:
        port: 8080
      env:
        - name: QUOTE_SERVICE_PORT
          value: "8080"
        - name: OTEL_PHP_AUTOLOAD_ENABLED
          value: "true"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: 'http://insight-agent-opentelemetry-collector.insight-system.svc.cluster.local:4318'
      podAnnotations:
        instrumentation.opentelemetry.io/inject-sdk: "insight-system/insight-opentelemetry-autoinstrumentation"
      resources:
        requests:
          cpu: "0.2"
          memory: 100Mi
        limits:
          cpu: "0.5"
          memory: 512Mi

    shippingService:
      enabled: true
      imageOverride:
        tag: "v1.4.0-beta-daocloud-shippingservice"
      useDefault:
        env: false
      env:
        - name: SHIPPING_SERVICE_PORT
          value: "8080"
        - name: QUOTE_SERVICE_ADDR
          value: 'http://{{ include "otel-demo.name" . }}-quoteservice:8080'
        - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
          value: "http://insight-agent-opentelemetry-collector.insight-system.svc.cluster.local:4317"
      podAnnotations:
        instrumentation.opentelemetry.io/inject-sdk: "insight-system/insight-opentelemetry-autoinstrumentation"
      resources:
        requests:
          cpu: "0.2"
          memory: 100Mi
        limits:
          cpu: "0.5"
          memory: 512Mi

    # this component is redefined in /template/cartservice/cartservice.yaml
    # cartservice deploy by /template/cartservice/cartservice.yaml supports switch redis deploy style
    cartService:
      enabled: false

    # this component is redefined in /template/adservice.yaml
    adService:
      enabled: false

    accountingService:
      enabled: false

    currencyService:
      enabled: false

    emailService:
      enabled: false

    featureflagService:
      enabled: false

    frauddetectionService:
      enabled: false

    frontendProxy:
      enabled: false

    recommendationService:
      enabled: false

    ffsPostgres:
      enabled: false

    kafka:
      enabled: false

    redis:
      enabled: false

  opentelemetry-collector:
    enabled: false

  jaeger:
    enabled: false

  prometheus:
    enabled: false

  grafana:
    enabled: false
