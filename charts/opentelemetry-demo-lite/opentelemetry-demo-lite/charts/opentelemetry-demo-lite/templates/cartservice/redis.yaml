{{- if eq .Values.global.middleware.redis.deployBy "builtin" -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-redis
  labels:
    opentelemetry.io/name: {{ .Release.Name }}-redis
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: redis
    app.kubernetes.io/name: {{ .Release.Name }}-redis
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: redis
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/name: {{ .Release.Name }}-redis
  template:
    metadata:
      labels:
        opentelemetry.io/name: {{ .Release.Name }}-redis
        app.kubernetes.io/component: redis
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/name: {{ .Release.Name }}-redis
        {{- if .Values.global.opentelemetryDemo.istioSidecar.enabled }}
        sidecar.istio.io/inject: 'true'
        {{- end }}
    spec:
      containers:
          - name: redis
            image: "{{ .Values.extensions.redis.image.registry }}/{{ .Values.extensions.redis.image.repository }}:{{ .Values.extensions.redis.image.tag }}"
            ports:
              - containerPort: 6379
                name: redis
            env:
              - name: OTEL_SERVICE_NAME
                valueFrom:
                  fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.labels['app.kubernetes.io/component']
              - name: OTEL_K8S_NAMESPACE
                valueFrom:
                  fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.namespace
              - name: OTEL_K8S_NODE_NAME
                valueFrom:
                  fieldRef:
                    apiVersion: v1
                    fieldPath: spec.nodeName
              - name: OTEL_K8S_POD_NAME
                valueFrom:
                  fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.name
              - name: OTEL_K8S_POD_UID
                valueFrom:
                  fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.uid
              - name: OTEL_COLLECTOR_NAME
                value: 'my-otel-demo-otelcol'
              - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
                value: cumulative
              - name: OTEL_RESOURCE_ATTRIBUTES
                value: service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=opentelemetry-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
            resources:
              requests:
                cpu: "0.2"
                memory: 100Mi
              limits:
                cpu: "0.5"
                memory: 512Mi
            securityContext:
              runAsUser: 999
              runAsGroup: 1000
              runAsNonRoot: true
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-redis
  labels:
    opentelemetry.io/name: {{ .Release.Name }}-redis
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: redis
    app.kubernetes.io/name: {{ .Release.Name }}-redis
spec:
  type: ClusterIP
  ports:
    - port: 6379
      name: redis
      targetPort: 6379
  selector:
    opentelemetry.io/name: {{ .Release.Name }}-redis
{{- else }}
---
apiVersion: redis.redis.opstreelabs.in/v1beta1
kind: Redis
metadata:
  name: redis-standalone
spec:
  kubernetesConfig:
    image: "{{ .Values.extensions.redis.redisCRResource.image.registry }}/{{ .Values.extensions.redis.redisCRResource.image.repository }}:{{ .Values.extensions.redis.redisCRResource.image.tag }}"
    imagePullPolicy: IfNotPresent
    resources:
      requests:
        cpu: 101m
        memory: 128Mi
      limits:
        cpu: 101m
        memory: 128Mi
  redisExporter:
    enabled: false
    image: "{{ .Values.extensions.redis.redisCRResource.redisExporterImage.registry }}/{{ .Values.extensions.redis.redisCRResource.redisExporterImage.repository }}:{{ .Values.extensions.redis.redisCRResource.redisExporterImage.tag }}"
    imagePullPolicy: Always
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 100m
        memory: 128Mi
  readinessProbe:
    failureThreshold: 5
    initialDelaySeconds: 15
    periodSeconds: 15
    successThreshold: 1
    timeoutSeconds: 5
  livenessProbe:
    failureThreshold: 5
    initialDelaySeconds: 15
    periodSeconds: 15
    successThreshold: 1
    timeoutSeconds: 5
  storage:
    volumeClaimTemplate:
      spec:
        storageClassName: default
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
{{- end }}